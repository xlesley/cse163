import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
from keras.models import Sequential
import os
import plotly.graph_objects as go
from preprocessing import get_cifar10_data

"""
Lesley Xu, (Albert) Hutiancong Wang, Sabrina Lin
CSE 163 Final Project WI 2023
This project implements AlexNet Architecture for Deep Learning
techniques to classify images from CIFAR-10 dataset that contains
60,000 32x32 color images in 10 classes with high level accuracy
and regularization processes.
"""

# -*- coding: utf-8 -*-
"""CIFAR10-classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZoIDYsiNWJVMn8_TU2qlYLKMPRyYYhDt
"""



os.environ["CUDA_DEVICE_ORDER"] = "PIC_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

x_train, y_train, x_val, y_val, x_test, y_test = get_cifar10_data()
print(x_train.shape, x_test.shape, x_val.shape)
print(y_train.shape, y_test.shape, y_val.shape)


def alexnet(input_shape: tuple[int, int, int] = (32, 32, 3)) -> Sequential:
    """
    Defines the alexnet model
    """
    model = Sequential()

    model.add(tf.keras.layers.Conv2D(12, (11, 11), strides=(4, 4),
                                     input_shape=(32, 32, 3),
                                     padding='same',
                                     activation='relu',
                                     kernel_initializer='uniform'))
    model.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))
    model.add(tf.keras.layers.BatchNormalization())

    model.add(tf.keras.layers.Conv2D(32, (5, 5), strides=(1, 1),
                                     padding='same',
                                     activation='relu',
                                     kernel_initializer='uniform'))
    model.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))
    model.add(tf.keras.layers.BatchNormalization())

    model.add(tf.keras.layers.Conv2D(48, (3, 3), strides=(1, 1),
                                     padding='same',
                                     activation='relu',
                                     kernel_initializer='uniform'))
    model.add(tf.keras.layers.Conv2D(48, (3, 3), strides=(1, 1),
                                     padding='same',
                                     activation='relu',
                                     kernel_initializer='uniform'))
    model.add(tf.keras.layers.Conv2D(32, (3, 3), strides=(1, 1),
                                     padding='same',
                                     activation='relu',
                                     kernel_initializer='uniform'))
    model.add(tf.keras.layers.Flatten())
    model.add(tf.keras.layers.Dense(256, activation='relu'))
    model.add(tf.keras.layers.Dropout(0.5))
    model.add(tf.keras.layers.Dense(128, activation='relu'))
    model.add(tf.keras.layers.Dropout(0.5))
    model.add(tf.keras.layers.Dense(10, activation='softmax'))

    print(model.summary())

    return model


model = alexnet()

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

train_history = model.fit(x_train, y_train, validation_data=(x_val, y_val),
                          epochs=50, batch_size=64, verbose=2)


def show_train_history(train_history: tf.keras.callbacks.History,
                       train: str, validation: str) -> None:
    """
    Draws a line plot showing the loss and accuracy for train history
    """
    fig = go.Figure()
    fig.add_trace(go.Scatter(y=train_history.history[train],
                             mode='lines', name='Train'))
    fig.add_trace(go.Scatter(y=train_history.history[validation],
                             mode='lines', name='Validation'))
    fig.update_layout(title='Train History',
                      xaxis_title='Epoch',
                      yaxis_title=train,
                      legend=dict(x=0, y=1))
    fig.show()


show_train_history(train_history, 'accuracy', 'val_accuracy')
show_train_history(train_history, 'loss', 'val_loss')

score = model.evaluate(x_test, y_test)
print('Test loss: ', score[0])
print('Test accuracy: ', score[1])

predictions = model.predict(x_test)
predictions = np.argmax(predictions, axis=1)
print('The predictions for the first 20 images: ', predictions[:20])


def cifar10_visualize_multiple_predict(start: int, end: int,
                                       length: int, width: int) -> None:
    """
    Visualizes the predictions from index start to end, exclusive
    """
    for i in range(start, end):
        plt.subplot(length, width, 1 + i)
        plt.imshow(x_test_original[i], cmap=plt.get_cmap('gray'))
        title_true = 'true= ' + str(y_test_original[i])
        title_prediction = '\nprediction = ' + str(predictions[i])
        title = title_true + title_prediction
        plt.title(title)
        plt.xticks([])
        plt.yticks([])
    plt.tight_layout(pad=0.4, w_pad=4, h_pad=0.1)
    plt.show()


(x_train_original, y_train_original), \
  (x_test_original, y_test_original) = tf.keras.datasets.cifar10.load_data()
cifar10_visualize_multiple_predict(0, 20, 4, 5)
